
import hudson.model.*;
pipeline{
    agent any
    stages{
        stage('Create Gradle.Build'){
            steps{
                script{
                    def content = '''
                    def builderFile = rootProject.file("JenkinsBuildFile.properties")
                    def builderProperties =new Properties()
                    def verCode = 1
                    def verName = "0.0.1"
                    if (builderFile.canRead()){
                        builderProperties.load(new FileInputStream(builderFile))
                        verCode = Integer.parseInt(builderProperties['VERSION_CODE'])
                        verName = builderProperties['VERSION_NAME']
                    }

                    android {
                        defaultConfig {
                            versionCode verCode
                            versionName verName
                        }

                        buildTypes {
                            release {
                                minifyEnabled false
                                signingConfig signingConfigs.release
                                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                            }

                            applicationVariants.all{ variant ->
                                variant.outputs.all{
                                    if (variant.name.endsWith("debug")){
                                        outputFileName = "debug_v${defaultConfig.versionCode}_${defaultConfig.versionName}.apk"
                                    }
                                }
                            }
                        }

                    }
                    '''
                    writeFile file: "gradle_temp.txt", text: content, encoding: "UTF-8"
                }
            }
        }
        stage('REQUEST VERSION'){
            steps{
                script{
                    def branch = "${GIT_BRANCH}".substring(7)
                    def url = "https://cloudapi.bytedance.net/faas/services/ttwcxk/invoke/jenkins_apk_builder?branch="+branch
                    def code =sh(script:"curl ${url} > index.json",returnStatus:true)
                    if(code == 0){
                        def result = sh(script:"cat index.json",returnStdout: true)
                        def result_map = readJSON text: result
                        if(result_map.code == 1){
                            version_Code = result_map.version_Code
                            version_Name = result_map.version_Name
                        }else{
                            echo 'api code = -1'
                        }
                    }else{
                        sh 'exit 1'
                    }
                }
            }
        }
        stage('PREPARING CONFIG FILE'){
            steps{
                script{
                    def insert_content = '''
                    \n\n
                    def builderFile = rootProject.file("JenkinsBuildFile.properties")
                    def builderProperties =new Properties()
                    def verCode = 1
                    def verName = "0.0.1"
                    if (builderFile.canRead()){
                             builderProperties.load(new FileInputStream(builderFile))
                             verCode = Integer.parseInt(builderProperties['VERSION_CODE'])
                             verName = builderProperties['VERSION_NAME']
                     }

                     android {
                     defaultConfig {
                        versionCode verCode
                        versionName verName
                        }

                     buildTypes {
                        release {
                            minifyEnabled false
                            signingConfig signingConfigs.release
                            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                        }

                        applicationVariants.all{ variant ->
                        variant.outputs.all{
                        if (variant.name.endsWith("debug")){
                                 outputFileName = "debug_v${defaultConfig.versionCode}_${defaultConfig.versionName}.apk"
                                    }
                                }
                            }
                        }
                     }
                    '''
                    def config_str = '''
                    VERSION_CODE=${version_Code}
                    VERSION_NAME=${version_Name}
                    '''

                    def build_content = readFile file: "./app/build.gradle", encoding: "UTF-8"
                    try{
                        sh 'cp -f ./local.properties ./local.properties.backup'
                    }catch(exc){}
                    writeFile file: "./app/build.gradle", text: build_content+insert_content, encoding: "UTF-8"

                    try{
                        sh 'cp -f ./local.properties ./local.properties.backup'
                    }catch(exc){}
                    writeFile file: "./local.properties", text: "sdk.dir=/usr/local/android-sdk-linux", encoding: "UTF-8"
                    writeFile file: "./JenkinsBuildFile.properties", text: config_str, encoding: "UTF-8"
                }
            }
        }
        stage('BUILD APK AND'){
            steps{
                sh 'gradle assembleDebug'
            }
        }
        stage('RESTORE CONFIG FILE'){
            steps{
                try{
                    sh 'mv -f ./app/build.gradle.backup ./app/build.gradle'
                }catch(exc){}

                try{
                    sh 'mv -f ./local.properties.backup ./local.properties'
                }catch(exc){}
            }
        }
    }
}